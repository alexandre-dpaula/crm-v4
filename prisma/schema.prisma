generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum LeadPriority {
  LOW
  MEDIUM
  HIGH
  HOT
}

enum LeadActivityType {
  CREATE
  UPDATE
  MOVE
  DELETE
}

model User {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  phone               String?
  avatarUrl           String?
  passwordHash        String
  timezone            String?               @default("America/Sao_Paulo")
  role                Role                  @default(USER)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastLoginAt         DateTime?
  pipelines           Pipeline[]
  leads               Lead[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  leadActivities      LeadActivity[]        @relation("LeadActivityActor")
}

model Session {
  id         String   @id @default(uuid())
  tokenHash  String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent  String?
  ipAddress  String?
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  revokedAt  DateTime?

  @@index([userId])
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  tokenHash  String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())

  @@index([userId])
}

model Pipeline {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stages    Stage[]
  leads     Lead[]

  @@index([userId])
}

model Stage {
  id         String   @id @default(uuid())
  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  name       String
  position   Int
  color      String   @default("#2563eb")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  leads      Lead[]

  @@index([pipelineId])
  @@unique([pipelineId, position])
}

model Lead {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pipelineId    String
  pipeline      Pipeline        @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  stageId       String?
  stage         Stage?          @relation(fields: [stageId], references: [id], onDelete: SetNull)
  title         String
  company       String?
  value         Decimal?        @db.Decimal(12, 2)
  status        String?         @default("open")
  priority      LeadPriority    @default(MEDIUM)
  tags          Json?
  contactEmail  String?
  contactPhone  String?
  notes         String?
  nextActionAt  DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  archivedAt    DateTime?
  activities    LeadActivity[]

  @@index([userId])
  @@index([pipelineId])
  @@index([stageId])
}

model LeadActivity {
  id          String           @id @default(uuid())
  leadId      String
  lead        Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  type        LeadActivityType
  payload     Json?
  actorUserId String
  actor       User             @relation("LeadActivityActor", fields: [actorUserId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())

  @@index([leadId])
  @@index([actorUserId])
}
